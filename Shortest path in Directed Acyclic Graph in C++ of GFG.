//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
         vector<int> dist(N, -1);
        // Distance from the source vertex to itself is 0
        dist[0] = 0;

        // Create an adjacency list to represent the graph
        unordered_map<int, vector<pair<int, int>>> adjList;
        for (const auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int weight = edge[2];
            adjList[u].push_back({v, weight});
        }

        // Priority queue to get the next vertex with the minimum distance
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // (distance, vertex)
        pq.push({0, 0});

        while (!pq.empty()) {
            auto node = pq.top();
            pq.pop();
            int u = node.second;
            int d = node.first;

            // If the distance to the current vertex is already smaller than the popped one, ignore it
            if (dist[u] != -1 && dist[u] < d) {
                continue;
            }

            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;
                int newDist = d + weight;

                // If the new distance is smaller than the current distance to v, update the distance
                if (dist[v] == -1 || newDist < dist[v]) {
                    dist[v] = newDist;
                    pq.push({newDist, v});
                }
            }
        }

        return dist;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
