//{ Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
class Solution {
public:
    static int countFractions(int n, int num[], int deno[]) {
        unordered_map<string, int> map;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int gcd = GCD(num[i], deno[i]);
            num[i] /= gcd;
            deno[i] /= gcd;
            string key = to_string(num[i]) + "|" + to_string(deno[i]);
            string expectedKey = to_string(deno[i] - num[i]) + "|" + to_string(deno[i]);
            ans += map[expectedKey];
            map[key]++;
        }
        return ans;
    }

private:
    static int GCD(int a, int b) {
        return a % b == 0 ? b : GCD(b, a % b);
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int numerator[n],denominator[n];
        for(int i=0;i<n;i++)
            cin>>numerator[i];
        for(int i=0;i<n;i++)
            cin>>denominator[i];
        Solution ob;
        int ans=ob.countFractions(n,numerator,denominator);
        cout<<ans<<endl;
    }
}
// } Driver Code Ends
